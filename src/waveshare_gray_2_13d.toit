// Copyright (C) 2018 Toitware ApS. All rights reserved.
// Use of this source code is governed by an MIT-style license that can be
// found in the LICENSE file.

// Driver for the flexible two-color Waveshare 104x212 2.13 inch 2 color
// e-paper display, type D.  Supports either partial update or 4-gray
// mode.

// The hat should be set to 4-pin SPI mode.
// Busy pin is 0=busy 1=notbusy

import bitmap show *
import gpio
import spi

import pixel-display show *

import .e-paper

LUT-VCOM-DC_ ::= #[
    0x00, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x60, 0x28, 0x28, 0x00, 0x00, 0x01,
    0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x12, 0x12, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00
]

LUT-WW_ ::= #[
    0x40, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x90, 0x28, 0x28, 0x00, 0x00, 0x01,
    0x40, 0x14, 0x00, 0x00, 0x00, 0x01,
    0xA0, 0x12, 0x12, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-BW_ ::= #[
    0x40, 0x17, 0x00, 0x00, 0x00, 0x02,
    0x90, 0x0F, 0x0F, 0x00, 0x00, 0x03,
    0x40, 0x0A, 0x01, 0x00, 0x00, 0x01,
    0xA0, 0x0E, 0x0E, 0x00, 0x00, 0x02,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-WB_ ::= #[
    0x80, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x90, 0x28, 0x28, 0x00, 0x00, 0x01,
    0x80, 0x14, 0x00, 0x00, 0x00, 0x01,
    0x50, 0x12, 0x12, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-BB_ ::= #[
    0x80, 0x08, 0x00, 0x00, 0x00, 0x02,
    0x90, 0x28, 0x28, 0x00, 0x00, 0x01,
    0x80, 0x14, 0x00, 0x00, 0x00, 0x01,
    0x50, 0x12, 0x12, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-VCOM-DC-GRAYSCALE_ ::= #[
    0x00, 0x0A, 0x00, 0x00, 0x00, 0x01,
    0x60, 0x14, 0x14, 0x00, 0x00, 0x01,
    0x00, 0x14, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x13, 0x0A, 0x01, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00,
]

LUT-WW-GRAYSCALE_ ::= #[
    0x40, 0x0A, 0x00, 0x00, 0x00, 0x01,
    0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
    0x10, 0x14, 0x0A, 0x00, 0x00, 0x01,
    0xA0, 0x13, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-BW-GRAYSCALE_ ::= #[
    0x40, 0x0A, 0x00, 0x00, 0x00, 0x01,
    0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
    0x00, 0x14, 0x0A, 0x00, 0x00, 0x01,
    0x99, 0x0C, 0x01, 0x03, 0x04, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-WB-GRAYSCALE_ ::= #[
    0x40, 0x0A, 0x00, 0x00, 0x00, 0x01,
    0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
    0x00, 0x14, 0x0A, 0x00, 0x00, 0x01,
    0x99, 0x0B, 0x04, 0x04, 0x01, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-BB-GRAYSCALE_ ::= #[
    0x80, 0x0A, 0x00, 0x00, 0x00, 0x01,
    0x90, 0x14, 0x14, 0x00, 0x00, 0x01,
    0x20, 0x14, 0x0A, 0x00, 0x00, 0x01,
    0x50, 0x13, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
]

LUT-VCOM-DC-PARTIAL_ ::= #[
    0x00, 0x19, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00
]

LUT-WW-PARTIAL_ ::= #[
    0x00, 0x19, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

LUT-BW-PARTIAL_ ::= #[
    0x80, 0x19, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

LUT-WB-PARTIAL_ ::= #[
    0x40, 0x19, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

LUT-BB-PARTIAL_ ::= #[
    0x00, 0x19, 0x01, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

class Waveshare2Color213D extends EPaper:
  flags:
    if four-gray-mode_:
      return FLAG-4-COLOR
    else:
      return FLAG-2-COLOR | FLAG-PARTIAL-UPDATES

  width := 0
  height := 0
  four-gray-mode_/bool
  speed_ := 50

  /**
  If $four-gray-mode is true then the driver has four gray levels and
    does not support partial updates.
  */
  constructor device/spi.Device
      .width=104
      .height=212
      --reset/gpio.Pin?
      --busy/gpio.Pin?
      --four-gray-mode/bool=false
      --auto-reset/bool=true
      --auto-initialize/bool=true:
    four-gray-mode_ = four-gray-mode
    super device
        --reset=reset
        --busy=busy
    if auto-reset: reset
    if auto-initialize: initialize

  initialize:

  flush:
    switch-off_

  init-two-color_:
    reset --ms=10

    send-array POWER-SETTING_ #[
      0x03,  // Internal DC/DC converter for power.
      0x00,  // VCOM voltage level 20V.
      0x2b,  // VDH power for B/W pixel +15V
      0x2b,  // VDL power for B/W pixel -15V
      0x03  // VDHR power for red pixel +3V
    ]

    send BOOSTER-SOFT-START_  // Default values.
      0x17  // A
      0x17  // B
      0x17  // C

    send POWER-ON_
    check-status_

    send PANEL-SETTING_ (RES-96-252_ | LUT-FROM-REG_ | BLACK-WHITE_ | SCAN-UP_ | SOURCE-SHIFT-RIGHT_ | BOOSTER-SWITCH-ON_ | NO-SOFT-RESET_) 0x0d

    send PLL-CONTROL_ 0x3a  // 0x3a 100Hz, 0x3c 50Hz

    send RESOLUTION-SETTING_ width height >> 8 height
    send VCOM-DC_ 0x28  // in steps of -0.05V, this is -2.1V

  check-status_:
    send GET-STATUS_
    wait-for-busy

  init-grayscale_:
    reset --ms=10

    send-array POWER-SETTING_ #[
      0x03,  // Internal DC/DC converter for power.
      0x00,  // VCOM voltage level +-16V.
      0x2b,  // VDH power for B/W pixel
      0x2b,  // VDL power for B/W pixel
      0x13  // VDHR power for red pixel
    ]

    send BOOSTER-SOFT-START_  // Default values.
      0x17  // A
      0x17  // B
      0x17  // C

    send POWER-ON_
    check-status_

    send PANEL-SETTING_ (RES-96-230_ | LUT-FROM-REG_ | BLACK-WHITE_ | SCAN-UP_ | SOURCE-SHIFT-RIGHT_ | BOOSTER-SWITCH-ON_ | NO-SOFT-RESET_) 0x0d

    send PLL-CONTROL_ 0x3c  // 0x3a 100Hz, 0x3c 50Hz

    send RESOLUTION-SETTING_ width height >> 8 height

    send VCOM-DC_ 0x12  // in steps of -0.05V

  static NO-UPDATE-IN-PROGRESS_ ::= 0
  static FULL-UPDATE-IN-PROGRESS_ ::= 1
  static PARTIAL-UPDATE-IN-PROGRESS_ ::= 2

  update-in-progress_ := NO-UPDATE-IN-PROGRESS_

  start-full-update speed/int:
    if update-in-progress_ != NO-UPDATE-IN-PROGRESS_: throw "Already updating"
    speed_ = speed
    if four-gray-mode_:
      init-grayscale_
      set-grayscale-registers_
      send DATA-START-TRANSMISSION-1_
      saved-plane-0-pixels_ = []
    else:
      init-two-color_
      set-full-registers_
      send DATA-START-TRANSMISSION-2_
    update-in-progress_ = FULL-UPDATE-IN-PROGRESS_

  start-partial-update speed/int:
    if update-in-progress_ != NO-UPDATE-IN-PROGRESS_:
      throw "Already updating"
    speed_ = speed
    if four-gray-mode_: throw "No partial update supported"
    init-two-color_
    set-partial-registers_
    update-in-progress_ = PARTIAL-UPDATE-IN-PROGRESS_

  draw-two-color left/int top/int right/int bottom/int pixels/ByteArray -> none:
    if four-gray-mode_: throw "Two color data sent in gray mode"
    if update-in-progress_ == NO-UPDATE-IN-PROGRESS_: throw "Data sent while not updating"
    w := right - left
    h := bottom - top
    if update-in-progress_ == FULL-UPDATE-IN-PROGRESS_:
      dump_ 0xff pixels w h
    else:
      send PARTIAL-IN_
      send-array PARTIAL-WINDOW_ [ left, right - 1, top >> 8, top, (bottom - 1) >> 8, bottom - 1, 0x28 ]
      send DATA-START-TRANSMISSION-1_
      dump_ 0xff pixels w h
      send DATA-START-TRANSMISSION-2_
      dump_ 0 pixels w h
      refresh-all
      send PARTIAL-OUT_

  saved-plane-0-pixels_ := null

  draw-two-bit left/int top/int right/int bottom/int plane-0-pixels/ByteArray plane-1-pixels/ByteArray -> none:
    if not four-gray-mode_: throw "Gray data sent in two-color mode"
    if update-in-progress_ != FULL-UPDATE-IN-PROGRESS_: throw "Data sent while not updating"
    w := right - left
    h := bottom - top
    saved-plane-0-pixels_.add [plane-0-pixels, w, h]
    dump_ 0xff plane-1-pixels w h

  vcom-and-data-interval_ interval:
    assert: 2 <= interval <= 17
    return 17 - interval

  // Full update mode is also black-white-red mode.
  static FULL-MODE-1-IS-RED_ ::= 0x00
  static FULL-MODE-0-IS-RED_ ::= 0x20
  static FULL-MODE-1-IS-BLACK_ ::= 0x00
  static FULL-MODE-1-IS-WHITE_ ::= 0x10
  static FULL-MODE-FLOATING-BORDER-WHEN-1-IS-BLACK_ ::= 0x00
  static FULL-MODE-RED-BORDER-WHEN-1-IS-BLACK_      ::= 0x40
  static FULL-MODE-WHITE-BORDER-WHEN-1-IS-BLACK_    ::= 0x80
  static FULL-MODE-BLACK-BORDER-WHEN-1-IS-BLACK_    ::= 0xC0
  static FULL-MODE-FLOATING-BORDER-WHEN-1-IS-WHITE_ ::= 0xC0
  static FULL-MODE-RED-BORDER-WHEN-1-IS-WHITE_      ::= 0x80
  static FULL-MODE-WHITE-BORDER-WHEN-1-IS-WHITE_    ::= 0x40
  static FULL-MODE-BLACK-BORDER-WHEN-1-IS-WHITE_    ::= 0x00

  static RES-96-230_ ::= 0x00
  static RES-96-252_ ::= 0x80
  static RES-128-296_ ::= 0x40
  static RES-160-296_ ::= 0xc0
  static LUT-FROM-OTP_ ::= 0x00
  static LUT-FROM-REG_ ::= 0x20
  static BLACK-WHITE-RED_ ::= 0x00
  static BLACK-WHITE_ ::= 0x10
  static SCAN-DOWN_ ::= 0
  static SCAN-UP_ ::= 8
  static SOURCE-SHIFT-LEFT_ ::= 0
  static SOURCE-SHIFT-RIGHT_ ::= 4
  static BOOSTER-SWITCH-OFF_ ::= 0
  static BOOSTER-SWITCH-ON_ ::= 2
  static SOFT-RESET_ ::= 0
  static NO-SOFT-RESET_ ::= 1

  switch-off_:
    if update-in-progress_ == NO-UPDATE-IN-PROGRESS_: return
    update-in-progress_ = NO-UPDATE-IN-PROGRESS_

    set-border-floating_
    sleep --ms=1
    check-status_

    send VCOM-AND-DATA-SETTING-INTERVAL_ 0xf7   // 0x50 0xf7
    send POWER-OFF_                             // 0x02
    sleep --ms=1
    check-status_

    wait-for-busy                               // Wait for the busy line to be not busy
    send DEEP-SLEEP_ DEEP-SLEEP-CHECK_          // 0x07 0xa5

  set-full-registers_:
    send VCOM-AND-DATA-SETTING-INTERVAL_
      FULL-MODE-1-IS-WHITE_ +
        FULL-MODE-0-IS-RED_ +
          FULL-MODE-WHITE-BORDER-WHEN-1-IS-BLACK_ +
            (vcom-and-data-interval_ 10)
    send-array VCOM-LUT_ LUT-VCOM-DC_
    send-array W2W-LUT_ LUT-WW_
    send-array B2W-LUT_ LUT-BW_
    send-array W2B-LUT_ LUT-WB_
    send-array B2B-LUT_ LUT-BB_

  set-grayscale-registers_:
    send VCOM-AND-DATA-SETTING-INTERVAL_
      FULL-MODE-1-IS-WHITE_ +
        FULL-MODE-RED-BORDER-WHEN-1-IS-WHITE_ +
          (vcom-and-data-interval_ 10)
    send-array VCOM-LUT_ LUT-VCOM-DC-GRAYSCALE_
    send-array W2W-LUT_ LUT-WW-GRAYSCALE_
    send-array B2W-LUT_ LUT-BW-GRAYSCALE_
    send-array W2B-LUT_ LUT-WB-GRAYSCALE_
    send-array B2B-LUT_ LUT-BB-GRAYSCALE_
    send-array VCOM-LUT-2_ LUT-VCOM-DC-GRAYSCALE_

  // Partial mode is also black-and-white mode.
  static PARTIAL-MODE-1-IS-WHITE_ ::= 0x00
  static PARTIAL-MODE-1-IS-BLACK_ ::= 0x10
  static PARTIAL-MODE-BORDER-IS-FLOATING_ ::= 0x00  // Also 0xC0.
  static PARTIAL-MODE-BORDER-IS-0_ ::= 0x40
  static PARTIAL-MODE-BORDER-IS-1_ ::= 0x80

  set-partial-registers_:
    send VCOM-DC_ 3
    send VCOM-AND-DATA-SETTING-INTERVAL_ PARTIAL-MODE-BORDER-IS-0_ + PARTIAL-MODE-1-IS-WHITE_ + (vcom-and-data-interval_ 10)
    send-array VCOM-LUT_ LUT-VCOM-DC-PARTIAL_
    send-array W2W-LUT_ LUT-WW-PARTIAL_
    send-array B2W-LUT_ LUT-BW-PARTIAL_
    send-array W2B-LUT_ LUT-WB-PARTIAL_
    send-array B2B-LUT_ LUT-BB-PARTIAL_

  refresh-all:
    send DISPLAY-REFRESH_
    sleep --ms=1
    check-status_

  // Called at the end of a series of draw commands.  For partial mode we don't
  // need to do anything, but for full mode there is some final cleanup to do.
  commit left top width height:
    if update-in-progress_ == FULL-UPDATE-IN-PROGRESS_:
      if four-gray-mode_:
        send DATA-START-TRANSMISSION-2_
        saved-plane-0-pixels_.do:
          pixels := it[0]
          w := it[1]
          h := it[2]
          dump_ 0xff pixels w h
        saved-plane-0-pixels_ = null
      else:
        screen-bytes := (width * height) >> 3
        send DATA-START-TRANSMISSION-1_
        send-repeated-bytes screen-bytes 0
      refresh-all
    switch-off_

  set-border-floating_:
    send VCOM-AND-DATA-SETTING-INTERVAL_
      FULL-MODE-1-IS-WHITE_ +
        FULL-MODE-0-IS-RED_ +
          FULL-MODE-FLOATING-BORDER-WHEN-1-IS-WHITE_ +
            (vcom-and-data-interval_ 10)
